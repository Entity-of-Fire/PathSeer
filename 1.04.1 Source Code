#include <windows.h>
#include <tlhelp32.h>
#include <stdio.h>
#include "resource.h"

#define ID_LISTBOX     1001
#define ID_SAVEBUTTON  1002
#define ID_ABOUTBUTTON 1003
#define ID_HEADERLABEL 1004
#define ID_STATUSBAR   1005
#define ID_TIMER       2001

HINSTANCE g_hInst;
HWND hList, hStatus;

LRESULT CALLBACK WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);

void RefreshProcessList(HWND hwnd) {
    SendMessage(hList, LB_RESETCONTENT, 0, 0);

    HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS | TH32CS_SNAPMODULE, 0);
    PROCESSENTRY32 pe = { sizeof(pe) };
    MODULEENTRY32 me = { sizeof(me) };

    int count = 0;
    if (Process32First(hSnap, &pe)) {
        do {
            if (Module32First(hSnap, &me)) {
                char buffer[512];
                wsprintf(buffer, "%s - %s", pe.szExeFile, me.szExePath);
                SendMessage(hList, LB_ADDSTRING, 0, (LPARAM)buffer);
                count++;
            }
        } while (Process32Next(hSnap, &pe));
    }
    CloseHandle(hSnap);

    char status[128];
    wsprintf(status, "Ready. Processes listed: %d", count);
    SetWindowText(hStatus, status);
    SendMessage(hList, LB_SETHORIZONTALEXTENT, 1000, 0);
}

int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrev, LPSTR lpCmdLine, int nCmdShow) {
    g_hInst = hInst;

    WNDCLASS wc = {0};
    wc.lpfnWndProc   = WindowProc;
    wc.hInstance     = hInst;
    wc.lpszClassName = "PathSeerClass";
    wc.hCursor       = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wc.lpszMenuName  = NULL;
    wc.style         = CS_HREDRAW | CS_VREDRAW;

    if (!RegisterClass(&wc)) {
        MessageBox(NULL, "Failed to register window class.", "Error", MB_ICONERROR);
        return 1;
    }

    HWND hwnd = CreateWindow("PathSeerClass", "PathSeer v1.02 - Entity_of_Fire",
        WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 640, 420,
        NULL, NULL, hInst, NULL);

    if (!hwnd) {
        MessageBox(NULL, "Failed to create main window.", "Error", MB_ICONERROR);
        return 1;
    }

    ShowWindow(hwnd, nCmdShow);
    UpdateWindow(hwnd);

    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
        case WM_CREATE: {
            CreateWindow("STATIC", "Active Processes and Their Paths:",
                WS_CHILD | WS_VISIBLE, 10, 0, 400, 20,
                hwnd, (HMENU)ID_HEADERLABEL, g_hInst, NULL);

            hList = CreateWindow("LISTBOX", NULL,
                WS_CHILD | WS_VISIBLE | WS_VSCROLL | WS_HSCROLL | LBS_NOTIFY,
                10, 20, 600, 300,
                hwnd, (HMENU)ID_LISTBOX, g_hInst, NULL);

            CreateWindow("BUTTON", "Save to File",
                WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,
                10, 330, 100, 24,
                hwnd, (HMENU)ID_SAVEBUTTON, g_hInst, NULL);

            CreateWindow("BUTTON", "About",
                WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,
                120, 330, 100, 24,
                hwnd, (HMENU)ID_ABOUTBUTTON, g_hInst, NULL);

            hStatus = CreateWindow("STATIC", "Ready.",
                WS_CHILD | WS_VISIBLE | SS_SUNKEN,
                10, 360, 600, 18,
                hwnd, (HMENU)ID_STATUSBAR, g_hInst, NULL);

            SetTimer(hwnd, ID_TIMER, 5000, NULL);
            RefreshProcessList(hwnd);

            RegisterHotKey(hwnd, 1, MOD_CONTROL | MOD_SHIFT, 'V');

            return 0;
        }

        case WM_TIMER:
            RefreshProcessList(hwnd);
            return 0;

        case WM_COMMAND:
            switch (LOWORD(wParam)) {
                case ID_SAVEBUTTON: {
                    int count = SendMessage(hList, LB_GETCOUNT, 0, 0);
                    FILE* fp = fopen("PathSeer_Log.txt", "w");
                    if (fp) {
                        for (int i = 0; i < count; i++) {
                            char buffer[512];
                            SendMessage(hList, LB_GETTEXT, i, (LPARAM)buffer);
                            fprintf(fp, "%s\n", buffer);
                        }
                        fclose(fp);
                        MessageBox(hwnd, "Process list saved to PathSeer_Log.txt", "Success", MB_OK);
                    } else {
                        MessageBox(hwnd, "Failed to save file.", "Error", MB_ICONERROR);
                    }
                    return 0;
                }
                case ID_ABOUTBUTTON:
                    MessageBox(hwnd, "PathSeer v1.02\nCreated by Entity_of_Fire", "About", MB_OK);
                    return 0;
            }
            break;

        case WM_HOTKEY:
            if (wParam == 1) {
                MessageBox(hwnd, "Secret menu activated!\nBuild Rev: 1.04-kernel", "PathSeer Internal", MB_OK);
                return 0;
            }
            break;

        case WM_DESTROY:
            KillTimer(hwnd, ID_TIMER);
            UnregisterHotKey(hwnd, 1);
            PostQuitMessage(0);
            return 0;
    }

    return DefWindowProc(hwnd, msg, wParam, lParam);
}
